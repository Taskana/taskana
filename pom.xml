<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>pro.taskana</groupId>
  <artifactId>taskana-parent</artifactId>
  <version>8.0.2-SNAPSHOT</version>
  <packaging>pom</packaging>

  <name>${project.groupId}:${project.artifactId}</name>
  <description>This pom is parent to all taskana modules and serves the common build.</description>
  <url>http://taskana.pro</url>

  <developers>
    <developer>
      <name>Holger Hagen</name>
      <email>holger.hagen@novatec-gmbh.de</email>
      <organization>Novatec Consulting GmbH</organization>
      <organizationUrl>https://www.novatec-gmbh.de</organizationUrl>
    </developer>
  </developers>

  <scm>
    <url>https://github.com/taskana/taskana/tree/master</url>
    <connection>scm:git:git://github.com/taskana/taskana.git</connection>
    <developerConnection>scm:git:ssh://github.com:taskana/taskana.git</developerConnection>
  </scm>

  <licenses>
    <license>
      <name>The Apache License, Version 2.0</name>
      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
    </license>
  </licenses>

  <properties>
    <java.version>17</java.version>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <version.mybatis>3.5.15</version.mybatis>
    <version.json>20240303</version.json>

    <!-- build dependencies -->
    <version.checkstyle>10.14.0</version.checkstyle>
    <version.google-java-format>1.20.0</version.google-java-format>
    <version.maven.checkstyle>3.3.1</version.maven.checkstyle>
    <version.maven.jar>3.3.0</version.maven.jar>
    <version.maven.war>3.4.0</version.maven.war>
    <version.maven.compiler>3.13.0</version.maven.compiler>
    <version.maven.source>3.3.1</version.maven.source>
    <version.maven.javadoc>3.6.3</version.maven.javadoc>
    <version.maven.resources>3.3.1</version.maven.resources>
    <version.maven.surefire>3.2.5</version.maven.surefire>
    <version.maven.asciidoctor>3.0.0</version.maven.asciidoctor>
    <version.maven.clean>3.2.0</version.maven.clean>
    <version.maven.dependency>3.6.1</version.maven.dependency>
    <version.maven.sonar>3.11.0.3922</version.maven.sonar>

    <!-- release dependencies -->
    <version.maven.gpg>3.2.2</version.maven.gpg>
    <version.sonatype>1.6.13</version.sonatype>

    <!-- spring dependencies -->
    <version.jakarta.annotation-api>2.1.1</version.jakarta.annotation-api>
    <version.spring.plugin.core>3.0.0</version.spring.plugin.core>
    <version.spring.boot>3.1.5</version.spring.boot>
    <version.spring.mybatis>3.0.2</version.spring.mybatis>

    <!-- wildfly dependencies -->
    <version.wildfly>27.0.1.Final</version.wildfly>

    <!-- camunda dependencies -->
    <version.camunda.dmn>7.20.0</version.camunda.dmn>

    <!-- java ee dependencies -->
    <version.jakartaee-api>10.0.0</version.jakartaee-api>
    <version.jakarta.servlet>6.0.0</version.jakarta.servlet>
    <version.arquillian>1.7.2.Final</version.arquillian>
    <version.arquillian.managed.wildfly>5.0.1.Final</version.arquillian.managed.wildfly>

    <!-- test dependencies -->
    <version.assertj>3.25.3</version.assertj>
    <version.archunit>1.2.1</version.archunit>
    <version.equalsverifier>3.15.8</version.equalsverifier>
    <version.openpojo>0.9.1</version.openpojo>
    <version.jacoco>0.8.11</version.jacoco>
    <version.slf4j-test>3.0.1</version.slf4j-test>
    <version.auto-restdocs>2.0.11</version.auto-restdocs>
    <version.testcontainers>1.19.7</version.testcontainers>

    <!-- AspectJ dependencies -->
    <version.aspectj-maven-plugin>1.15.0</version.aspectj-maven-plugin>
    <version.aspectj>1.9.22</version.aspectj>

    <!-- Excel to DMN converter dependencies -->
    <version.docx4j>11.4.11</version.docx4j>
    <version.jakarta.xml.bind-api>4.0.2</version.jakarta.xml.bind-api>
    <version.jaxb-core>4.0.4</version.jaxb-core>
    <version.jaxb-impl>4.0.5</version.jaxb-impl>
    <version.jakarta.activation>2.1.3</version.jakarta.activation>

    <!-- database driver versions -->
    <version.db2>11.5.6.0</version.db2>
    <version.oracle>23.3.0.23.09</version.oracle>

    <!-- sonar settings -->
    <sonar.projectKey>${env.SONAR_PROJECT_KEY}</sonar.projectKey>
    <sonar.organization>${env.SONAR_ORGANIZATION}</sonar.organization>
    <sonar.moduleKey>${project.artifactId}</sonar.moduleKey>
    <sonar.host.url>https://sonarcloud.io</sonar.host.url>
    <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
    <sonar.coverage.jacoco.xmlReportPaths>
      ${project.basedir}/ci/taskana-sonar-test-coverage/target/site/jacoco-aggregate/jacoco.xml,
      ${project.basedir}/../ci/taskana-sonar-test-coverage/target/site/jacoco-aggregate/jacoco.xml,
      ${project.basedir}/../../ci/taskana-sonar-test-coverage/target/site/jacoco-aggregate/jacoco.xml
    </sonar.coverage.jacoco.xmlReportPaths>
    <sonar.sources>src/main/java</sonar.sources>
    <sonar.tests>src/test/java</sonar.tests>
    <sonar.exclusions>
      org/camunda/bpm/dmn/**/*,
      **/example/**/*,
      **/*Example*
    </sonar.exclusions>
  </properties>

  <modules>
    <module>common</module>
    <module>lib</module>
    <!--
      History is an optional module but used in taskana-rest-spring-example-wildfly
      because of that it must be build before the rest module
    -->
    <module>history</module>
    <module>rest</module>
    <module>ci/taskana-sonar-test-coverage</module>
    <module>routing</module>
  </modules>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${version.spring.boot}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>
      <!-- Only necessary to automatically update the version for the pre-commit hook -->
      <dependency>
        <groupId>com.google.googlejavaformat</groupId>
        <artifactId>google-java-format</artifactId>
        <version>${version.google-java-format}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <profiles>
    <profile>
      <id>snapshot</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>${version.maven.gpg}</version>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <!-- The pinentry-mode loopback is necessary to specify and use a passphrase with a gpg key -->
              <gpgArguments>
                <arg>--pinentry-mode</arg>
                <arg>loopback</arg>
              </gpgArguments>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>nexus-staging-maven-plugin</artifactId>
            <version>${version.sonatype}</version>
            <extensions>true</extensions>
            <configuration>
              <serverId>ossrh</serverId>
              <nexusUrl>https://oss.sonatype.org/</nexusUrl>
              <autoReleaseAfterClose>false</autoReleaseAfterClose>
            </configuration>
          </plugin>
        </plugins>
      </build>
      <distributionManagement>
        <snapshotRepository>
          <id>ossrh</id>
          <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
      </distributionManagement>
    </profile>
    <profile>
      <id>release</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>${version.maven.gpg}</version>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <!-- The pinentry-mode loopback is necessary to specify and use a passphrase with a gpg key -->
              <gpgArguments>
                <arg>--pinentry-mode</arg>
                <arg>loopback</arg>
              </gpgArguments>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>nexus-staging-maven-plugin</artifactId>
            <version>${version.sonatype}</version>
            <extensions>true</extensions>
            <configuration>
              <serverId>ossrh</serverId>
              <nexusUrl>https://oss.sonatype.org/</nexusUrl>
              <autoReleaseAfterClose>false</autoReleaseAfterClose>
            </configuration>
          </plugin>
        </plugins>
      </build>
      <distributionManagement>
        <repository>
          <id>ossrh</id>
          <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
        </repository>
      </distributionManagement>
    </profile>
  </profiles>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.sonarsource.scanner.maven</groupId>
          <artifactId>sonar-maven-plugin</artifactId>
          <version>${version.maven.sonar}</version>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${version.jacoco}</version>
        <configuration>
          <excludes>
            <exclude>org/camunda/bpm/dmn/**/*</exclude>
            <exclude>**/example/**/*</exclude>
            <exclude>**/*Example*</exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <id>prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>${version.maven.war}</version>
      </plugin>
      <!-- This plugin appends version information into the jar, so
          that it can be extracted from the jar. See TSK-837 for more information -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>${version.maven.jar}</version>
        <configuration>
          <archive>
            <manifest>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
            </manifest>
          </archive>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${version.maven.compiler}</version>
        <configuration>
          <showWarnings>true</showWarnings>
          <failOnWarning>true</failOnWarning>
          <showDeprecation>true</showDeprecation>
          <compilerArgs>
            <arg>-Xlint:-serial</arg>
            <arg>-proc:none</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>${version.maven.source}</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>${version.maven.javadoc}</version>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${version.maven.surefire}</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>${version.maven.checkstyle}</version>
        <dependencies>
          <dependency>
            <groupId>com.puppycrawl.tools</groupId>
            <artifactId>checkstyle</artifactId>
            <version>${version.checkstyle}</version>
          </dependency>
        </dependencies>
        <configuration>
          <configLocation>qa/checkstyle/checkstyle.xml</configLocation>
          <encoding>UTF-8</encoding>
          <consoleOutput>true</consoleOutput>
          <failsOnError>true</failsOnError>
          <failOnViolation>true</failOnViolation>
          <violationSeverity>warning</violationSeverity>
          <includeTestSourceDirectory>true</includeTestSourceDirectory>
          <excludes>**/org/camunda/bpm/dmn/**/*</excludes>
        </configuration>
        <executions>
          <execution>
            <phase>process-classes</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>aspectj-maven-plugin</artifactId>
        <version>${version.aspectj-maven-plugin}</version>
        <dependencies>
          <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjtools</artifactId>
            <version>${version.aspectj}</version>
          </dependency>
        </dependencies>
        <configuration>
          <complianceLevel>${java.version}</complianceLevel>
          <source>17</source>
          <target>8</target>
          <showWeaveInfo>false</showWeaveInfo>
          <verbose>true</verbose>
          <aspectLibraries>
            <aspectLibrary>
              <groupId>pro.taskana</groupId>
              <artifactId>taskana-common-logging</artifactId>
            </aspectLibrary>
          </aspectLibraries>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>test-compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
