package pro.taskana.classification.api;

import pro.taskana.classification.api.exceptions.ClassificationAlreadyExistException;
import pro.taskana.classification.api.exceptions.ClassificationInUseException;
import pro.taskana.classification.api.exceptions.ClassificationNotFoundException;
import pro.taskana.classification.api.models.Classification;
import pro.taskana.common.api.exceptions.ConcurrencyException;
import pro.taskana.common.api.exceptions.DomainNotFoundException;
import pro.taskana.common.api.exceptions.InvalidArgumentException;
import pro.taskana.common.api.exceptions.NotAuthorizedException;

/** This class manages the {@linkplain Classification Classifications}. */
public interface ClassificationService {

  /**
   * Fetches the {@linkplain Classification} identified by the provided key and domain.
   *
   * <p>If there's no {@linkplain Classification} in the given domain, returns the {@linkplain
   * Classification} from the master domain.
   *
   * @param key the key of the searched-for {@linkplain Classification}
   * @param domain the domain of the searched-for {@linkplain Classification}
   * @return If exist: domain-specific {@linkplain Classification}, else Master-{@linkplain
   *     Classification}
   * @throws ClassificationNotFoundException if no {@linkplain Classification} is found that matches
   *     the key either in domain or in the master domain
   */
  Classification getClassification(String key, String domain)
      throws ClassificationNotFoundException;

  /**
   * Returns the {@linkplain Classification} by ID.
   *
   * @param id the ID of the searched-for {@linkplain Classification}
   * @return the {@linkplain Classification} identified by ID
   * @throws ClassificationNotFoundException if no {@linkplain Classification} is found that matches
   *     the ID
   */
  Classification getClassification(String id) throws ClassificationNotFoundException;

  /**
   * Deletes a {@linkplain Classification} with all Child-{@linkplain Classification
   * Classifications}.
   *
   * @param id the ID of the searched-for {@linkplain Classification}
   * @throws ClassificationInUseException if there are {@linkplain pro.taskana.task.api.models.Task
   *     Tasks} existing, which refer to this {@linkplain Classification}
   * @throws ClassificationNotFoundException if for an domain no {@linkplain Classification}
   *     specification is found
   * @throws NotAuthorizedException if the current user is not member of role BUSINESS_ADMIN or
   *     ADMIN
   */
  void deleteClassification(String id)
      throws ClassificationInUseException, ClassificationNotFoundException, NotAuthorizedException;

  /**
   * Deletes a {@linkplain Classification} with all Child-{@linkplain Classification
   * Classifications}.
   *
   * @param classificationKey the key of the {@linkplain Classification} you want to delete
   * @param domain the domains for which you want to delete the {@linkplain Classification}. If the
   *     method tries to delete the Master-Domain-{@linkplain Classification} and any other
   *     {@linkplain Classification} with this key
   * @throws ClassificationInUseException if there are {@linkplain pro.taskana.task.api.models.Task
   *     Tasks} existing, which refer to this {@linkplain Classification}
   * @throws ClassificationNotFoundException if for an domain no {@linkplain Classification}
   *     specification is found
   * @throws NotAuthorizedException if the current user is not member of role BUSINESS_ADMIN or
   *     ADMIN
   */
  void deleteClassification(String classificationKey, String domain)
      throws ClassificationInUseException, ClassificationNotFoundException, NotAuthorizedException;

  /**
   * Inserts a new {@linkplain Classification} after adding default values.
   *
   * <p>The {@linkplain Classification} will be added to master-domain, too - if not already
   * existing.
   *
   * <p>The default values are:
   *
   * <ul>
   *   <li><b>id</b> - generated by {@linkplain pro.taskana.common.internal.util.IdGenerator
   *       IdGenerator}
   *   <li><b>parentId</b> - ""
   *   <li><b>parentKey</b> - ""
   *   <li><b>serviceLevel</b> - "P0D"
   *   <li><b>isValidInDomain</b> - {@code true} <br>
   *       if domain is an empty string then {@code false}
   * </ul>
   *
   * @param classification the {@linkplain Classification} to insert
   * @return {@linkplain Classification} which is equipped with unique ID
   * @throws ClassificationAlreadyExistException if the {@linkplain Classification} does already
   *     exists at the given domain
   * @throws NotAuthorizedException if the current user is not member of role BUSINESS_ADMIN or
   *     ADMIN
   * @throws DomainNotFoundException if the domain does not exist in the configuration
   * @throws InvalidArgumentException if the serviceLevel property does not comply with the ISO 8601
   *     specification
   */
  Classification createClassification(Classification classification)
      throws ClassificationAlreadyExistException, NotAuthorizedException, DomainNotFoundException,
          InvalidArgumentException;

  /**
   * Updates a {@linkplain Classification}.
   *
   * @param classification the {@linkplain Classification} to update
   * @return the updated {@linkplain Classification}
   * @throws ClassificationNotFoundException if the {@linkplain Classification} OR itÂ´s parent does
   *     not exist
   * @throws NotAuthorizedException if the caller got no ADMIN or BUSINESS_ADMIN permissions
   * @throws ConcurrencyException if the {@linkplain Classification} was modified in the meantime
   *     and is not the most up to date anymore
   * @throws InvalidArgumentException if the serviceLevel property does not comply with the ISO 8601
   *     specification
   */
  Classification updateClassification(Classification classification)
      throws ClassificationNotFoundException, NotAuthorizedException, ConcurrencyException,
          InvalidArgumentException;

  /**
   * Provides a query builder for querying the database.
   *
   * @return a {@linkplain ClassificationQuery}
   */
  ClassificationQuery createClassificationQuery();

  /**
   * Creates a new {@linkplain Classification} with unchangeable default values.
   *
   * <p>It will be only generated and is not inserted until CREATE-call.
   *
   * @param key the key of the {@linkplain Classification}
   * @param domain the domain of the new {@linkplain Classification}
   * @param type the type of the new {@linkplain Classification}
   * @return {@linkplain Classification} to specify
   */
  Classification newClassification(String key, String domain, String type);
}
