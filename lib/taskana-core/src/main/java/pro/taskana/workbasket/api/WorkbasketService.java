package pro.taskana.workbasket.api;

import java.util.List;

import pro.taskana.common.api.BulkOperationResults;
import pro.taskana.common.api.exceptions.ConcurrencyException;
import pro.taskana.common.api.exceptions.DomainNotFoundException;
import pro.taskana.common.api.exceptions.InvalidArgumentException;
import pro.taskana.common.api.exceptions.NotAuthorizedException;
import pro.taskana.common.api.exceptions.TaskanaException;
import pro.taskana.workbasket.api.exceptions.InvalidWorkbasketException;
import pro.taskana.workbasket.api.exceptions.WorkbasketAccessItemAlreadyExistException;
import pro.taskana.workbasket.api.exceptions.WorkbasketAlreadyExistException;
import pro.taskana.workbasket.api.exceptions.WorkbasketInUseException;
import pro.taskana.workbasket.api.exceptions.WorkbasketNotFoundException;
import pro.taskana.workbasket.api.models.Workbasket;
import pro.taskana.workbasket.api.models.WorkbasketAccessItem;
import pro.taskana.workbasket.api.models.WorkbasketSummary;

/** This service manages {@linkplain pro.taskana.workbasket.api.models.Workbasket Workbaskets}. */
public interface WorkbasketService {

  /**
   * Returns {@linkplain Workbasket} for a given ID.
   *
   * @param workbasketId the ID of the {@linkplain Workbasket} requested
   * @return the requested {@linkplain Workbasket}
   * @throws WorkbasketNotFoundException If the {@linkplain Workbasket} with workbasketId is not
   *     found
   * @throws NotAuthorizedException If the current user or group does not have the permissions for
   *     interactions
   */
  Workbasket getWorkbasket(String workbasketId)
      throws WorkbasketNotFoundException, NotAuthorizedException;

  /**
   * Returns {@linkplain pro.taskana.workbasket.api.models.Workbasket Workbasket} for a given key.
   *
   * @param workbasketKey the key of the {@linkplain Workbasket} requested
   * @param domain the domain of the {@linkplain Workbasket}
   * @return the requested {@linkplain Workbasket}
   * @throws WorkbasketNotFoundException If the {@linkplain Workbasket} with workbasketId is not
   *     found
   * @throws NotAuthorizedException If the current user or group does not have the permissions for
   *     interactions
   */
  Workbasket getWorkbasket(String workbasketKey, String domain)
      throws WorkbasketNotFoundException, NotAuthorizedException;

  /**
   * Creates a new {@linkplain pro.taskana.workbasket.api.models.Workbasket Workbasket}.
   *
   * <p>The default values are:
   *
   * <ul>
   *   <li><b>id</b> - generated by {@linkplain pro.taskana.common.internal.util.IdGenerator
   *       IdGenerator}
   * </ul>
   *
   * @param workbasket The {@linkplain Workbasket} to create
   * @return the created and inserted {@linkplain Workbasket}
   * @throws InvalidWorkbasketException If a required property of the {@linkplain Workbasket} is not
   *     set
   * @throws NotAuthorizedException if the current user is not member of role BUSINESS_ADMIN or
   *     ADMIN
   * @throws WorkbasketAlreadyExistException if the {@linkplain Workbasket} exists already
   * @throws DomainNotFoundException if the domain does not exist in the configuration
   */
  Workbasket createWorkbasket(Workbasket workbasket)
      throws InvalidWorkbasketException, NotAuthorizedException, WorkbasketAlreadyExistException,
          DomainNotFoundException;

  /**
   * Updates a {@linkplain pro.taskana.workbasket.api.models.Workbasket Workbasket}.
   *
   * @param workbasket The {@linkplain Workbasket} to update
   * @return the updated {@linkplain Workbasket}
   * @throws InvalidWorkbasketException if workbasketName or type is invalid
   * @throws NotAuthorizedException if the current user is not authorized to update the {@linkplain
   *     Workbasket}
   * @throws WorkbasketNotFoundException if the {@linkplain Workbasket} cannot be found
   * @throws ConcurrencyException if an attempt is made to update the {@linkplain Workbasket} and
   *     another user updated it already
   */
  Workbasket updateWorkbasket(Workbasket workbasket)
      throws InvalidWorkbasketException, NotAuthorizedException, WorkbasketNotFoundException,
          ConcurrencyException;

  /**
   * Returns a new {@linkplain WorkbasketAccessItem} which is not inserted.
   *
   * @param workbasketId the workbasketId used to identify the referenced {@linkplain Workbasket}
   * @param accessId the groupId or userId for which access is controlled
   * @return new {@linkplain WorkbasketAccessItem}
   */
  WorkbasketAccessItem newWorkbasketAccessItem(String workbasketId, String accessId);

  /**
   * Creates and inserts a new {@linkplain WorkbasketAccessItem} with a workbasketId, an accessId
   * and permissions.
   *
   * @param workbasketAccessItem the new {@linkplain WorkbasketAccessItem}
   * @return the created {@linkplain WorkbasketAccessItem}
   * @throws InvalidArgumentException if the preconditions dont match the required ones
   * @throws NotAuthorizedException if the current user is not member of role BUSINESS_ADMIN or
   *     ADMIN
   * @throws WorkbasketNotFoundException if workbasketAccessItem refers to a not existing
   *     {@linkplain Workbasket}
   * @throws WorkbasketAccessItemAlreadyExistException if there exists already a {@linkplain
   *     WorkbasketAccessItem} for the same accessId and {@linkplain Workbasket}
   */
  WorkbasketAccessItem createWorkbasketAccessItem(WorkbasketAccessItem workbasketAccessItem)
      throws InvalidArgumentException, NotAuthorizedException, WorkbasketNotFoundException,
          WorkbasketAccessItemAlreadyExistException;

  /**
   * Updates a {@linkplain WorkbasketAccessItem}.
   *
   * @param workbasketAccessItem the {@linkplain WorkbasketAccessItem}
   * @return the updated entity
   * @throws InvalidArgumentException if accessId or workbasketId is changed in the
   *     workbasketAccessItem
   * @throws NotAuthorizedException if the current user is not member of role BUSINESS_ADMIN or
   *     ADMIN
   */
  WorkbasketAccessItem updateWorkbasketAccessItem(WorkbasketAccessItem workbasketAccessItem)
      throws InvalidArgumentException, NotAuthorizedException;

  /**
   * Deletes a specific {@linkplain WorkbasketAccessItem}.
   *
   * @param id the ID of the {@linkplain WorkbasketAccessItem} to be deleted
   * @throws NotAuthorizedException if the current user is not member of role BUSINESS_ADMIN or
   *     ADMIN
   */
  void deleteWorkbasketAccessItem(String id) throws NotAuthorizedException;

  /**
   * Checks the authorization for the actual user.
   *
   * @param workbasketId the ID of the {@linkplain Workbasket} we want to access
   * @param permission the needed {@linkplain WorkbasketPermission} If more than one permission is
   *     specified, the current user needs all of them
   * @throws NotAuthorizedException if the current user has not the requested authorization for the
   *     specified {@linkplain Workbasket}
   * @throws WorkbasketNotFoundException if the {@linkplain Workbasket} cannot be found for the
   *     given ID
   */
  void checkAuthorization(String workbasketId, WorkbasketPermission... permission)
      throws NotAuthorizedException, WorkbasketNotFoundException;

  /**
   * Checks the authorization for the actual user.
   *
   * @param workbasketKey the key of the {@linkplain Workbasket} we want to access
   * @param domain the domain of the {@linkplain Workbasket} we want to access
   * @param permission the needed {@linkplain WorkbasketPermission}. If more than one permission is
   *     specified, the current user needs all of them
   * @throws NotAuthorizedException if the current user has not the requested permission for the
   *     specified {@linkplain Workbasket}
   * @throws WorkbasketNotFoundException if no {@linkplain Workbasket} can be found for the given
   *     key+domain values
   */
  void checkAuthorization(String workbasketKey, String domain, WorkbasketPermission... permission)
      throws NotAuthorizedException, WorkbasketNotFoundException;

  /**
   * Returns all {@linkplain WorkbasketAccessItem WorkbasketAccessItems} for a {@linkplain
   * Workbasket}.
   *
   * @param workbasketId the ID of the {@linkplain Workbasket}
   * @return List of {@linkplain WorkbasketAccessItem WorkbasketAccessItems} for the {@linkplain
   *     Workbasket} with workbasketKey
   * @throws NotAuthorizedException if the current user is not member of role BUSINESS_ADMIN or
   *     ADMIN
   */
  List<WorkbasketAccessItem> getWorkbasketAccessItems(String workbasketId)
      throws NotAuthorizedException;

  /**
   * Sets up the new {@linkplain WorkbasketAccessItem} for a {@linkplain Workbasket}. Already stored
   * values will be completely replaced by the current ones.
   *
   * <p>Preconditions for each {@linkplain WorkbasketAccessItem} in {@code wbAccessItems}:
   *
   * <ul>
   *   <li>{@linkplain WorkbasketAccessItem#getWorkbasketId()} is not null
   *   <li>{@linkplain WorkbasketAccessItem#getWorkbasketId()} is equal to {@code workbasketId}
   *   <li>{@linkplain WorkbasketAccessItem#getAccessId()} is unique
   * </ul>
   *
   * @param workbasketId ID of the access-target {@linkplain Workbasket}
   * @param wbAccessItems List of {@linkplain WorkbasketAccessItem WorkbasketAccessItems} which does
   *     replace all current stored ones
   * @throws InvalidArgumentException will be thrown when the parameter {@code wbAccessItems} is
   *     NULL or member doesn't match the preconditions
   * @throws NotAuthorizedException if the current user is not member of role BUSINESS_ADMIN or
   *     ADMIN
   * @throws WorkbasketAccessItemAlreadyExistException if {@code wbAccessItems} contains multiple
   *     accessItems with the same accessId
   */
  void setWorkbasketAccessItems(String workbasketId, List<WorkbasketAccessItem> wbAccessItems)
      throws InvalidArgumentException, NotAuthorizedException,
          WorkbasketAccessItemAlreadyExistException;

  /**
   * Provides a query builder for querying the database.
   *
   * @return a {@linkplain WorkbasketQuery}
   */
  WorkbasketQuery createWorkbasketQuery();

  /**
   * Provides a query builder for querying the database.
   *
   * @return a {@linkplain WorkbasketAccessItemQuery}
   * @throws NotAuthorizedException if the current user is not member of role BUSINESS_ADMIN or
   *     ADMIN
   */
  WorkbasketAccessItemQuery createWorkbasketAccessItemQuery() throws NotAuthorizedException;

  /**
   * Returns a new {@linkplain Workbasket} which is not inserted.
   *
   * @param key the workbasketKey used to identify the {@linkplain Workbasket}
   * @param domain the domain of the new {@linkplain Workbasket}
   * @return new {@linkplain Workbasket}
   */
  Workbasket newWorkbasket(String key, String domain);

  /**
   * Returns a set with all permissions of the current user at this {@linkplain Workbasket}.
   *
   * <p>If the workbasketId is invalid, an empty list of permissions is returned since there is no
   * distinction made between the situation that the {@linkplain Workbasket} is not found and the
   * caller has no permissions on the {@linkplain Workbasket}.
   *
   * @param workbasketId the ID of the referenced {@linkplain Workbasket}
   * @return a List with all {@linkplain WorkbasketPermission}s of the caller on the requested
   *     {@linkplain Workbasket}
   */
  List<WorkbasketPermission> getPermissionsForWorkbasket(String workbasketId);

  /**
   * Returns the distribution targets for a given {@linkplain Workbasket}.
   *
   * @param workbasketId the ID of the referenced {@linkplain Workbasket}
   * @return the distribution targets of the specified {@linkplain Workbasket}
   * @throws NotAuthorizedException if the current user has no read permission for the specified
   *     {@linkplain Workbasket}
   * @throws WorkbasketNotFoundException if the {@linkplain Workbasket} doesn't exist
   */
  List<WorkbasketSummary> getDistributionTargets(String workbasketId)
      throws NotAuthorizedException, WorkbasketNotFoundException;

  /**
   * Returns the distribution targets for a given {@linkplain Workbasket}.
   *
   * @param workbasketKey the key of the referenced {@linkplain Workbasket}
   * @param domain the domain of the referenced {@linkplain Workbasket}
   * @return the distribution targets of the specified {@linkplain Workbasket}
   * @throws NotAuthorizedException if the current user has no read permission for the specified
   *     {@linkplain Workbasket}
   * @throws WorkbasketNotFoundException if the {@linkplain Workbasket} doesn't exist
   */
  List<WorkbasketSummary> getDistributionTargets(String workbasketKey, String domain)
      throws NotAuthorizedException, WorkbasketNotFoundException;

  /**
   * Sets the distribution targets for a {@linkplain Workbasket}.
   *
   * @param sourceWorkbasketId the ID of the source {@linkplain Workbasket} for which the
   *     distribution targets are to be set
   * @param targetWorkbasketIds a list of the IDs of the target {@linkplain Workbasket}
   * @throws NotAuthorizedException if the current user doesn't have READ permission for the source
   *     {@linkplain Workbasket}
   * @throws WorkbasketNotFoundException if either the source {@linkplain Workbasket} or any of the
   *     target {@linkplain Workbasket Workbaskets} don't exist
   */
  void setDistributionTargets(String sourceWorkbasketId, List<String> targetWorkbasketIds)
      throws NotAuthorizedException, WorkbasketNotFoundException;

  /**
   * Adds a distribution target to a {@linkplain Workbasket}.
   *
   * <p>If the specified distribution target exists already, the method silently returns without
   * doing anything.
   *
   * @param sourceWorkbasketId the ID of the source {@linkplain Workbasket}
   * @param targetWorkbasketId the ID of the target {@linkplain Workbasket}
   * @throws NotAuthorizedException if the current user doesn't have READ permission for the source
   *     {@linkplain Workbasket}
   * @throws WorkbasketNotFoundException if either the source {@linkplain Workbasket} or the target
   *     {@linkplain Workbasket} doesn't exist
   */
  void addDistributionTarget(String sourceWorkbasketId, String targetWorkbasketId)
      throws NotAuthorizedException, WorkbasketNotFoundException;

  /**
   * Removes a distribution target from a {@linkplain Workbasket}. If the specified distribution
   * target doesn't exist, the method silently returns without doing anything.
   *
   * @param sourceWorkbasketId The ID of the source {@linkplain Workbasket}
   * @param targetWorkbasketId The id of the target {@linkplain Workbasket}
   * @throws NotAuthorizedException If the current user doesn't have READ permission for the source
   *     {@linkplain Workbasket}
   */
  void removeDistributionTarget(String sourceWorkbasketId, String targetWorkbasketId)
      throws NotAuthorizedException;

  /**
   * Deletes the {@linkplain Workbasket} by the given ID of it.
   *
   * @param workbasketId ID of the {@linkplain Workbasket} which should be deleted
   * @return true if the {@linkplain Workbasket} was deleted successfully. false if the {@linkplain
   *     Workbasket} is marked for deletion.
   * @throws NotAuthorizedException if the current user got no permissions for this interaction
   * @throws WorkbasketNotFoundException if the {@linkplain Workbasket} does not exist
   * @throws WorkbasketInUseException if the {@linkplain Workbasket} does contain task-content
   * @throws InvalidArgumentException if the workbasketId is NULL or EMPTY
   */
  boolean deleteWorkbasket(String workbasketId)
      throws NotAuthorizedException, WorkbasketNotFoundException, WorkbasketInUseException,
          InvalidArgumentException;

  /**
   * Deletes a list of {@linkplain Workbasket Workbaskets}.
   *
   * @param workbasketsIds the IDs of the {@linkplain Workbasket Workbaskets} to delete
   * @return the result of the operations with ID and Exception for each failed {@linkplain
   *     Workbasket} deletion
   * @throws InvalidArgumentException if the workbasketIds parameter list is NULL or empty
   * @throws NotAuthorizedException if the current user got no permission for this interaction
   */
  BulkOperationResults<String, TaskanaException> deleteWorkbaskets(List<String> workbasketsIds)
      throws NotAuthorizedException, InvalidArgumentException;

  /**
   * Returns the distribution sources for a given {@linkplain Workbasket}.
   *
   * @param workbasketId the ID of the referenced {@linkplain Workbasket}
   * @return the {@linkplain Workbasket Workbaskets} that are distribution sources of the specified
   *     {@linkplain Workbasket}
   * @throws NotAuthorizedException if the current user has no read permission for the specified
   *     {@linkplain Workbasket}
   * @throws WorkbasketNotFoundException if the {@linkplain Workbasket} doesn't exist
   */
  List<WorkbasketSummary> getDistributionSources(String workbasketId)
      throws NotAuthorizedException, WorkbasketNotFoundException;

  /**
   * Returns the distribution sources for a given {@linkplain Workbasket}.
   *
   * @param workbasketKey the key of the referenced {@linkplain Workbasket}
   * @param domain the domain of the referenced {@linkplain Workbasket}
   * @return the {@linkplain Workbasket} that are distribution sources of the specified {@linkplain
   *     Workbasket}
   * @throws NotAuthorizedException if the current user has no read permission for the specified
   *     {@linkplain Workbasket}
   * @throws WorkbasketNotFoundException if the {@linkplain Workbasket} doesn't exist
   */
  List<WorkbasketSummary> getDistributionSources(String workbasketKey, String domain)
      throws NotAuthorizedException, WorkbasketNotFoundException;

  /**
   * Deletes all {@linkplain WorkbasketAccessItem WorkbasketAccessItems} using the given AccessId of
   * a user.
   *
   * @param accessId of a taskana-user
   * @throws NotAuthorizedException if the current user is not member of role BUSINESS_ADMIN or
   *     ADMIN
   */
  void deleteWorkbasketAccessItemsForAccessId(String accessId) throws NotAuthorizedException;
}
